
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Canvas, Button, PhotoImage
from sidebar import open_sidebar_window
from dic_part import open_dic_part_window
from tkinter import ttk
import tkinter as tk

# 단어장 화면에서 사이드바 여는 함수
def validate_sidebar(current_window):
    open_sidebar_window(current_window)

# image에 접근하기 위해 path 설정
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0") # 상대경로

# image 접근하기 위한 path 설정해주는 함수, 최종 특정 이미지 선택하게 해줌
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# 단어장에서 위의 화면으로 가게 해주는 함수 ( part 1, part 2, part 3 )
def frame_up(current_window,**buttons):
    # button 객체를 buttons_list에 담음
    buttons_list = [] #buttons_list = ['buttons_1', 'buttons_2', 'buttons_3', 'buttons_5']
    for a,b in buttons.items():
        buttons_list.append(b)
    
    # button_5 => 위로 가는 버튼
    buttons_list[3].place(
        x=323.0,
        y=517.0,
        width=54.000003814697266,
        height=24.819787979125977
    )
    buttons_list[3].config(
        command=lambda:frame_down(
            current_window,
            buttons_1=buttons_list[0],
            buttons_2=buttons_list[1],
            buttons_3=buttons_list[2],
            buttons_5=buttons_list[3]
        ),
        image=button_image_5
    )

    # button_1 => part 1 버튼
    buttons_list[0].config(
        command=lambda: open_dic_part_window(current_window,"part 1"),
        image=button_image_1
    )

    # button_2 => part 2 버튼
    buttons_list[1].config(
        command=lambda:open_dic_part_window(current_window,"part 2"),
        image=button_image_2
    )

    # button_3 => part 3 버튼
    buttons_list[2].config(
        command=lambda:open_dic_part_window(current_window,"part 3"),
        image=button_image_3
    )

# 단어장에서 아래로 가게 해주는 함수 ( part 4, part 5, part 6 )
def frame_down(current_window,**buttons):
    # button 객체를 buttons_list에 담음
    buttons_list = [] #buttons_list = ['buttons_1', 'buttons_2', 'buttons_3', 'buttons_5']
    for a,b in buttons.items():
        buttons_list.append(b)

    # button_5 => 아래로 가는 버튼
    buttons_list[3].place(
        x=322.99999618530273,
        y=85.0000057220459,
        width=54.000003814697266,
        height=24.819787979125977
    )
    
    buttons_list[3].config(
        command=lambda:frame_up(
            current_window,
            buttons_1=buttons_list[0],
            buttons_2=buttons_list[1],
            buttons_3=buttons_list[2],
            buttons_5=buttons_list[3],
        ),
        image=button_image_6
    )

    # button_1 => part 4 버튼
    buttons_list[0].config(
        command=lambda:open_dic_part_window(current_window,"part 4"),
        image=button_image_7
    )
    # button_2 => part 5 버튼
    buttons_list[1].config(
        command=lambda:open_dic_part_window(current_window,"part 5"),
        image=button_image_8
    )
    # button_3 => part 6 버튼
    buttons_list[2].config(
        command=lambda:open_dic_part_window(current_window,"part 6"),
        image=button_image_9
    )
#=========================================================

# 단어장 window를 여는 함수 ( ex. login 페이지에서 로그인을 했을 때 )
def open_dic_window(current_window):
    for widget in current_window.winfo_children():
        widget.destroy()
    global button_image_1,button_image_2,button_image_3,button_image_5,button_image_6,button_image_7,button_image_8,button_image_9,button_1,button_2,button_3,button_5
    # global 함수를 최대한 줄이는 방향으로 추후에 개발 예정, frame_up, frame_down 함수에서 위의 객체를 쓰기 위함

        # 프레임 바꿀 때 쓰는 이미지들 선언
    button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    button_image_7 = PhotoImage(
        file=relative_to_assets("button_7.png"))
    button_image_8 = PhotoImage(
        file=relative_to_assets("button_8.png"))
    button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))

    style = ttk.Style()
    style.theme_use('clam')  # 스타일 테마 선택 (Tkinter의 기본 테마 중 하나)

    # 회색 바 스타일 설정
    style.configure('TFrame', background='#838383')  # 스타일에 색상을 지정합니다.

    # 회색 바 프레임
    title_bar_frame = ttk.Frame(current_window, style='TFrame', height=30)
    title_bar_frame.pack(fill='x')
    title_bar_frame.pack(pady=10)

    # 회색바 꾸미기: 톱니바퀴 이미지 넣기
    gear_icon = tk.PhotoImage(file="resource/gear_icon.png").subsample(10)

    gear_button = tk.Label(title_bar_frame, image=gear_icon, relief="flat", bd=0,bg='#838383')
    gear_button.image = gear_icon  # 이미지가 garbage-collected 되는 것을 방지
    gear_button.pack(side="left", padx=5)

    # 회색바 꾸미기: "토익단어" 글씨 넣기
    text_label = tk.Label(title_bar_frame, text="토익단어", font=("Helvetica", 15))
    text_label.pack(side="left", padx=5)

    # 회색바 꾸미기: 사이드바 버튼 넣기
    sidebar_icon = tk.PhotoImage(file="resource/sidebar_icon.png").subsample(10)

    sidebar_button = tk.Button(title_bar_frame, image=sidebar_icon, relief="flat", bd=0, command=lambda:validate_sidebar(current_window),bg='#838383')
    sidebar_button.image = gear_icon  # 이미지가 garbage-collected 되는 것을 방지
    sidebar_button.pack(side="right", padx=5)
    canvas = Canvas(
        current_window,
        bg = "#FFFFFF",
        height = 550,
        width = 700,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y =64)

    #part1, part4
    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        350.0,
        105.0,
        image=image_image_3
    )
    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        349.0,
        250.0,
        image=image_image_4
    )
    image_image_5 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    image_5 = canvas.create_image(
        349.0,
        397.0,
        image=image_image_5
    )

    # part 1 버튼
    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_dic_part_window(current_window,"part 1"),
        relief="flat"
    )
    button_1.place(
        x=70.0,
        y=135.0,
        width=95.0,
        height=32.0
    )

    # part 2 버튼
    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_dic_part_window(current_window,"part 2"),
        relief="flat"
    )
    button_2.place(
        x=70.0,
        y=280.0,
        width=95.0,
        height=32.0
    )

    # part 3 버튼
    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_dic_part_window(current_window,"part 3"),
        relief="flat"
    )
    button_3.place(
        x=70.0,
        y=428.0,
        width=95.0,
        height=32.0
    )

    #part1, part4
    image_image_6 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_6 = canvas.create_image(
        210.0,
        126.0,
        image=image_image_6
    )

    image_image_7 = PhotoImage(
        file=relative_to_assets("image_7.png"))
    image_7 = canvas.create_image(
        209.0,
        271.0,
        image=image_image_7
    )

    image_image_8 = PhotoImage(
        file=relative_to_assets("image_8.png"))
    image_8 = canvas.create_image(
        210.0,
        419.0,
        image=image_image_8
    )

    #part1, part4
    image_image_9 = PhotoImage(
        file=relative_to_assets("image_9.png"))
    image_9 = canvas.create_image(
        209.0,
        125.0,
        image=image_image_9
    )

    image_image_10 = PhotoImage(
        file=relative_to_assets("image_10.png"))
    image_10 = canvas.create_image(
        209.0,
        270.0,
        image=image_image_10
    )

    image_image_11 = PhotoImage(
        file=relative_to_assets("image_11.png"))
    image_11 = canvas.create_image(
        209.0,
        419.0,
        image=image_image_11
    )

    #part1, part4
    image_image_12 = PhotoImage(
        file=relative_to_assets("image_12.png"))
    image_12 = canvas.create_image(
        483.0,
        126.0,
        image=image_image_12
    )

    image_image_13 = PhotoImage(
        file=relative_to_assets("image_13.png"))
    image_13 = canvas.create_image(
        483.0,
        271.0,
        image=image_image_13
    )

    image_image_14 = PhotoImage(
        file=relative_to_assets("image_14.png"))
    image_14 = canvas.create_image(
        483.0,
        419.0,
        image=image_image_14
    )

    #part1, part4
    canvas.create_text(
        393.0,
        114.0,
        anchor="nw",
        text="학습률: n / 100 [n%]",
        fill="#000000",
        font=("Inter", 20 * -1)
    )

    canvas.create_text(
        393.0,
        259.0,
        anchor="nw",
        text="학습률: n / 100 [n%]",
        fill="#000000",
        font=("Inter", 20 * -1)
    )

    canvas.create_text(
        393.0,
        407.0,
        anchor="nw",
        text="학습률: n / 100 [n%]",
        fill="#000000",
        font=("Inter", 20 * -1)
    )

    # 다음 장으로 넘기는 버튼
    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:frame_down(
            current_window,
            buttons_1=button_1,
            buttons_2=button_2,
            buttons_3=button_3,
            buttons_5=button_5
        ),
        relief="flat",
    )
    button_5.place(
        x=323.0,
        y=517.0,
        width=54.000003814697266,
        height=24.819787979125977
    )

    # 윈도우 실행
    current_window.mainloop()

# 실행 확인할 수 있게 임시로 해놓은 것. 코드 병합하면 지울 예정임
if __name__ == "__main__":
    root = tk.Tk()
    my_windows_width = root.winfo_screenwidth()
    my_windows_height = root.winfo_screenheight()
    app_width = 700
    app_height = 550
    center_width = (my_windows_width/2)-(app_width/2)
    center_height = (my_windows_height/2)-(app_height/2)
    root.geometry(f"{app_width}x{app_height}+{int(center_width)}+{int(center_height)}")
    open_dic_window(root)
